def androidAppProject (Project project) {
    project.plugins.hasPlugin("com.android.application")
}

def updateProperiesFile(key, value)
{
  File propsFile = new File('./build.properties')
  def newProps = new Properties()

  newProps.setProperty(key, value)

  propsFile.withWriterAppend( 'UTF-8' ) { fileWriter ->
      newProps.each { k, v ->
              fileWriter.writeLine "$k=$v"
                  }
  }
}


def getReleaseAPKUrl(def release_type, Project project)
{
   Properties properties = new Properties()
   File propertiesFile = new File('./build.properties')
   propertiesFile.withInputStream {
      properties.load(it)
   }
  def releaseValue = properties."${release_type}APK"
  
  return releaseValue?"${project.DEPLOY_SERVER_URL}/${project.REMOTE_PROJECT_NAME}/$rootProject.appVersionName/$releaseValue":null
}

def getDate()
{
  def date = new Date()
  def formattedDate = date.format('yyyyMMddHHmm')
  return formattedDate
}

gradle.projectsLoaded {
  gradle.rootProject.buildscript {
    repositories {
      maven {
               name "DRC_BJ_JCENTER_REPO"
               url "http://172.22.35.162:8081/repository/jcenter"
            }
      }

      dependencies {
          classpath 'org.ajoberstar:gradle-git:1.7.1'
      }
  }  

  gradle.rootProject.afterEvaluate {      
    gradle.rootProject.configure(rootProject)
    {   
        if(new File("$project.rootDir/Mobile-Script", '.git').directory)
	      {
		      file("$project.rootDir/Mobile-Script/.git").renameTo(file("$project.rootDir/Mobile-Script/.gitrename"))
 	      }

        apply {
            apply from:"$project.rootDir/Mobile-Script/tools/script-git-version.gradle"
	      } 
        appVersionName = getVersionName()
	      appVersionCode = getVersionCode()
        updateProperiesFile("VersionName", appVersionName.toString())
        updateProperiesFile("apkOutDir", "build/outputs/apk")
        ext.apkOutDir = "build/outputs/apk"
    }
    
    gradle.rootProject.subprojects {
	    project.afterEvaluate { 
    		if(androidAppProject(project)) 
    		{	
			      project.android.applicationVariants.all { variant ->
				      variant.outputs.each { output ->

                def newName
                def propertyName
                def timeNow = getDate()
                def outDirectory = "$project.rootDir/build/outputs/apk"
                def signFlag =  variant.buildType.name.equals('debug') ? "signed" : "unsigned"

                newName = rootProject.name+'-'+project.name+'-'+variant.productFlavors[0].name+'-'+variant.buildType.name \
                +'-'+version+'-'+rootProject.BuildNumber+'-'+rootProject.buildType+'-'+signFlag+'.apk'
                
                propertyName =variant.productFlavors[0].name+variant.buildType.name+'APK'
                output.outputFile = new File(outDirectory, newName)
         
                if(newName.endsWith('unsigned.apk'))
                {
                    updateProperiesFile(propertyName, newName-'unsigned.apk'+'signed.apk')
                }
                else
                {
                    updateProperiesFile(propertyName, newName)
                }

				      } 

			      } 	
            println rootProject.getReleaseDes("fsf")
            project.tasks.create(["name":"copyprodtemplates", "type":Copy]){
              outputs.upToDateWhen { false}
              from "$project.rootDir/templates"
              into "$project.rootDir/$rootProject.apkOutDir"
              include '*-template.json'
              rename {fileName ->
              println fileName
              "${(fileName-'template.json'+project.name+'-'+version+'.json')}"
              }
              doFirst {
                expand([
                  VERSION: "$rootProject.appVersionName",
                  VERSIONCODE: "$rootProject.appVersionCode",
                  URLNAME: getReleaseAPKUrl(RELEASE_TYPE,project),
                  DESCRIPTION: getReleaseDes("v$rootProject.appVersionName")
                ])
              }
           }
	    } 
    }
 }

}
} 
